generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String         @unique
  password_hash String
  name          String
  role          Role           @default(staff)
  status        UserStatus     @default(active)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  labour_profile LabourProfile?
  bookings_as_customer Booking[] @relation("CustomerBookings")

  @@map("users")
}

model Category {
  id            Int             @id @default(autoincrement())
  name_en       String
  name_ur       String
  description_en String?
  description_ur String?
  icon_url      String?
  status        Status         @default(active)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  labour_profiles LabourProfile[]
  bookings      Booking[]

  @@map("categories")
}

model LabourProfile {
  id              Int             @id @default(autoincrement())
  user_id         Int             @unique
  category_id     Int
  name            String
  phone           String
  email           String?
  address         String
  city            String
  state           String?
  country         String          @default("Pakistan")
  photo_url       String?
  id_proof_url    String?
  experience_years Int             @default(0)
  hourly_rate     Decimal         @db.Decimal(10,2)
  status          LabourStatus    @default(pending)
  rating          Decimal?        @db.Decimal(3,2)
  total_ratings   Int             @default(0)
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  user            User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category        Category        @relation(fields: [category_id], references: [id], onDelete: Cascade)
  bookings        Booking[]

  @@map("labour_profiles")
}

model Booking {
  id              Int             @id @default(autoincrement())
  customer_id     Int
  labour_id       Int
  category_id     Int
  booking_date    DateTime        @db.Date
  start_time      DateTime        @db.Time
  end_time        DateTime?       @db.Time
  status          BookingStatus   @default(pending)
  amount          Decimal         @db.Decimal(10,2)
  payment_status  PaymentStatus   @default(pending)
  notes           String?         @db.Text
  rating          Decimal?        @db.Decimal(3,2)
  review          String?         @db.Text
  dispute_reason  String?         @db.Text
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  customer        User            @relation("CustomerBookings", fields: [customer_id], references: [id], onDelete: Cascade)
  labour          LabourProfile   @relation(fields: [labour_id], references: [id], onDelete: Cascade)
  category        Category        @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@map("bookings")
}

enum Role {
  admin
  staff
}

enum UserStatus {
  active
  suspended
}

enum Status {
  active
  inactive
}

enum LabourStatus {
  pending
  approved
  rejected
  suspended
}

enum BookingStatus {
  pending
  confirmed
  completed
  cancelled
  disputed
}

enum PaymentStatus {
  pending
  paid
  refunded
} 