"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src/middleware",{

/***/ "(middleware)/./src/lib/db-simple.ts":
/*!******************************!*\
  !*** ./src/lib/db-simple.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeConnection: () => (/* binding */ closeConnection),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   queryOne: () => (/* binding */ queryOne),\n/* harmony export */   testConnection: () => (/* binding */ testConnection)\n/* harmony export */ });\n/* harmony import */ var mysql2_promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mysql2/promise */ \"(middleware)/./node_modules/mysql2/promise.js\");\n\n// Single connection approach for extremely limited hosting\nlet connection = null;\nlet connectionPromise = null;\nconst dbConfig = {\n    host: process.env.DB_HOST || \"198.38.90.50\",\n    port: parseInt(process.env.DB_PORT || \"3306\"),\n    database: process.env.DB_NAME || \"bolalooc_mazdoor\",\n    user: process.env.DB_USER || \"bolalooc_maz123\",\n    password: process.env.DB_PASSWORD || \"EsbER0JeytIXlp40\",\n    // Only valid options for mysql2 single connections\n    connectTimeout: 60000,\n    timezone: \"+00:00\"\n};\nasync function getConnection() {\n    // Reuse existing connection if available and still connected\n    if (connection) {\n        try {\n            // Test if connection is still alive with a simple query\n            await connection.query(\"SELECT 1\");\n            return connection;\n        } catch (error) {\n            // Connection is dead, clean it up\n            console.log(\"[DB] Existing connection is dead, creating new one...\");\n            try {\n                await connection.end();\n            } catch (closeError) {\n            // Ignore errors when closing dead connection\n            }\n            connection = null;\n            connectionPromise = null;\n        }\n    }\n    // If there's already a connection being created, wait for it\n    if (connectionPromise) {\n        return connectionPromise;\n    }\n    console.log(\"[DB] Creating new database connection...\");\n    connectionPromise = mysql2_promise__WEBPACK_IMPORTED_MODULE_0__.createConnection(dbConfig);\n    try {\n        connection = await connectionPromise;\n        connectionPromise = null;\n        console.log(\"[DB] Database connection established successfully\");\n        // Handle connection errors\n        connection.on(\"error\", (err)=>{\n            console.error(\"Database connection error:\", err);\n            if (err.code === \"PROTOCOL_CONNECTION_LOST\" || err.code === \"ECONNRESET\") {\n                connection = null;\n                connectionPromise = null;\n            }\n        });\n        return connection;\n    } catch (error) {\n        console.error(\"[DB] Failed to create database connection:\", error);\n        connectionPromise = null;\n        throw error;\n    }\n}\nasync function query(sql, params = []) {\n    let retries = 5; // More retries\n    let delay = 1000; // Start with shorter delay\n    for(let attempt = 1; attempt <= retries; attempt++){\n        let conn = null;\n        try {\n            conn = await getConnection();\n            // Execute query with timeout\n            const [results] = await Promise.race([\n                conn.query(sql, params),\n                new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Query timeout after 30 seconds\")), 30000))\n            ]);\n            // Close connection immediately after successful query\n            await conn.end();\n            connection = null;\n            return results;\n        } catch (error) {\n            // Clean up connection on error\n            if (conn) {\n                try {\n                    await conn.end();\n                } catch (closeError) {\n                // Ignore close errors\n                }\n            }\n            connection = null;\n            connectionPromise = null;\n            console.error(`Database query error (attempt ${attempt}/${retries}):`, {\n                error: error.message,\n                code: error.code,\n                sql: sql.substring(0, 100) + (sql.length > 100 ? \"...\" : \"\")\n            });\n            if (attempt === retries) {\n                if (error.code === \"ER_TOO_MANY_USER_CONNECTIONS\") {\n                    throw new Error(\"Database connection limit reached. Your hosting provider has very strict connection limits. Please try again in a few moments or contact your hosting provider to increase the connection limit.\");\n                }\n                throw new Error(`Database error: ${error.message}`);\n            }\n            // Progressive delay with some randomness to avoid thundering herd\n            const randomDelay = delay + Math.random() * 1000;\n            console.log(`Retrying in ${randomDelay.toFixed(0)}ms...`);\n            await new Promise((resolve)=>setTimeout(resolve, randomDelay));\n            delay *= 1.2; // Slower growth\n        }\n    }\n    throw new Error(\"Max retries exceeded\");\n}\nasync function queryOne(sql, params = []) {\n    const results = await query(sql, params);\n    return results[0] || null;\n}\nasync function testConnection() {\n    try {\n        await query(\"SELECT 1 as test\");\n        return true;\n    } catch (error) {\n        console.error(\"Database connection test failed:\", error);\n        return false;\n    }\n}\nasync function closeConnection() {\n    if (connection) {\n        try {\n            await connection.end();\n            console.log(\"Database connection closed successfully\");\n        } catch (error) {\n            console.error(\"Error closing database connection:\", error);\n        } finally{\n            connection = null;\n            connectionPromise = null;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./src/lib/db-simple.ts\n");

/***/ })

});